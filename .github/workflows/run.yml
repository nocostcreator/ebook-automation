name: generate-ebook
on:
  workflow_dispatch:
  schedule:
    - cron: "0 13 * * *"   # daily 13:00 UTC (09:00 ET)

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install deps (Transformers CPU + FPDF)
        run: |
          python -m pip install --upgrade pip
          pip install "transformers>=4.44" "torch>=2.3" tqdm fpdf requests

      - name: Generate ebook text (no API)
        run: |
          python - <<'PY'
          import datetime
          from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline

          TOPIC = "Mindfulness for Beginners"      # <- change topics later
          MODEL_ID = "distilgpt2"                  # small & fast on CPU

          print(f"→ Loading model: {MODEL_ID}")
          tok = AutoTokenizer.from_pretrained(MODEL_ID)
          mdl = AutoModelForCausalLM.from_pretrained(MODEL_ID)
          gen = pipeline("text-generation", model=mdl, tokenizer=tok, device=-1)

          prompt = (
              f"Write a concise, beginner-friendly short ebook about: {TOPIC}.\n"
              "Include a short intro, 4–6 brief chapters (1–2 paragraphs each),\n"
              "and an actionable checklist at the end.\n"
          )

          print("→ Generating…")
          out = gen(prompt, max_new_tokens=400, do_sample=True, temperature=0.8, top_p=0.95)
          text = out[0]["generated_text"]

          ts = datetime.datetime.utcnow().strftime("%Y%m%d_%H%M%S")
          fname = f"ebook_{ts}.txt"
          with open(fname, "w", encoding="utf-8") as f:
              f.write(text)
          print("✅ Saved", fname)
          PY

      - name: Convert TXT → PDF
        run: |
          python - <<'PY'
          import glob, os
          from fpdf import FPDF

          def to_pdf(txt_path, pdf_path, title=None):
            pdf = FPDF(format="Letter")
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.add_page()
            pdf.set_font("Arial", "B", 16)
            if title:
              pdf.cell(0, 10, title, ln=True, align="C")
              pdf.ln(5)
            pdf.set_font("Arial", size=12)
            with open(txt_path, "r", encoding="utf-8") as f:
              for para in f.read().split("\n\n"):
                para = para.strip()
                if para:
                  pdf.multi_cell(0, 6, para)
                  pdf.ln(2)
            pdf.output(pdf_path)

          # convert all ebook_*.txt from this run
          for txt in glob.glob("ebook_*.txt"):
            pdf = txt.replace(".txt", ".pdf")
            to_pdf(txt, pdf, title=txt.replace("_", " ").replace(".txt","").title())
            print("✅ PDF:", pdf)
          PY

      - name: Upload artifacts (txt & pdf)
        uses: actions/upload-artifact@v4
        with:
          name: ebooks
          path: |
            ebook_*.txt
            ebook_*.pdf

      -      # Make the secret available as an env var at the job level
      - name: Export GUMROAD token to env
        run: echo "GUMROAD_ACCESS_TOKEN=${{ secrets.GUMROAD_ACCESS_TOKEN }}" >> $GITHUB_ENV

      - name: Gumroad upload (first PDF)
        # Use env.* in the condition instead of secrets.*
        if: ${{ env.GUMROAD_ACCESS_TOKEN != '' }}
        env:
          GUMROAD_ACCESS_TOKEN: ${{ env.GUMROAD_ACCESS_TOKEN }}
        run: |
          python - <<'PY'
          import os, glob, requests

          token = os.environ.get("GUMROAD_ACCESS_TOKEN")
          if not token:
              raise SystemExit("No GUMROAD_ACCESS_TOKEN; skipping upload.")

          pdfs = sorted(glob.glob("ebook_*.pdf"))
          if not pdfs:
              raise SystemExit("No PDFs to upload.")
          file_path = pdfs[0]
          title = file_path.replace("_", " ").replace(".pdf","").title()
          description = "Auto-generated short ebook. Includes intro, bite-size chapters, and a practical checklist."
          price_cents = "199"

          url = "https://api.gumroad.com/v2/products"
          files = { "product[content]": open(file_path, "rb") }
          data = {
            "access_token": token,
            "product[name]": title,
            "product[price]": price_cents,
            "product[description]": description,
            "product[is_visible]": "true"
          }
          resp = requests.post(url, data=data, files=files, timeout=180)
          print("HTTP", resp.status_code)
          print("Body:", resp.text[:800])
          resp.raise_for_status()
          PY
