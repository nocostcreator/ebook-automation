name: generate-ebook
on:
  workflow_dispatch:
  schedule:
    - cron: "0 13 * * *"

permissions:
  contents: write   # <= allow release creation

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install deps (Transformers CPU + fpdf2)
        run: |
          python -m pip install --upgrade pip
          pip install "transformers>=4.44" "torch>=2.3" tqdm fpdf2

      - name: Generate ebook text (no external API)
        run: |
          set -e
          python - <<'PY'
          import os, datetime
          from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline

          TOPIC = os.environ.get("TOPIC", "Mindfulness for Beginners")
          MODEL_ID = "distilgpt2"  # tiny & reliable on CPU

          print(f"→ Loading model: {MODEL_ID}")
          tok = AutoTokenizer.from_pretrained(MODEL_ID)
          mdl = AutoModelForCausalLM.from_pretrained(MODEL_ID)
          gen = pipeline("text-generation", model=mdl, tokenizer=tok, device=-1)

          prompt = (
              f"Write a concise, beginner-friendly short ebook about: {TOPIC}.\n"
              "Include a short intro, 4–6 brief chapters (1–2 paragraphs each),\n"
              "and an actionable checklist at the end.\n"
          )

          print("→ Generating…")
          out = gen(prompt, max_new_tokens=400, do_sample=True, temperature=0.8, top_p=0.95)
          text = out[0]["generated_text"]

          ts = datetime.datetime.utcnow().strftime("%Y%m%d_%H%M%S")
          fname = f"ebook_{ts}.txt"
          with open(fname, "w", encoding="utf-8") as f:
              f.write(text)
          print("✅ Saved", fname)
          PY

      - name: Convert TXT → PDF (Unicode-safe)
        run: |
          set -e
          python - <<'PY'
          import glob, os
          from fpdf import FPDF  # fpdf2

          FONT_PATH = "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"

          def to_pdf(txt_path, pdf_path, title=None):
              pdf = FPDF(format="Letter")
              pdf.add_page()
              pdf.add_font("DejaVu", "", FONT_PATH, uni=True)
              pdf.set_font("DejaVu", size=16)
              if title:
                  pdf.cell(0, 10, title, ln=True, align="C")
                  pdf.ln(5)
              pdf.set_font("DejaVu", size=12)
              with open(txt_path, "r", encoding="utf-8") as f:
                  text = f.read()
              for para in text.split("\n\n"):
                  para = para.strip()
                  if para:
                      pdf.multi_cell(0, 6, para)
                      pdf.ln(2)
              pdf.output(pdf_path)

          made_any = False
          for txt in glob.glob("ebook_*.txt"):
              pdf = txt.replace(".txt", ".pdf")
              title = os.path.basename(txt).replace("_"," ").replace(".txt","").title()
              to_pdf(txt, pdf, title)
              print("✅ PDF:", pdf)
              made_any = True

          if not made_any:
              raise SystemExit("No TXT files found to convert.")
          PY

      - name: Upload artifacts (TXT & PDF)
        uses: actions/upload-artifact@v4
        with:
          name: ebooks
          path: |
            ebook_*.txt
            ebook_*.pdf

      # --- Publish PDFs to a GitHub Release for public download links ---
        - name: Publish PDFs to a GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v-${{ github.run_id }}
          name: "Auto ebook run ${{ github.run_id }}"
          body: "Automated build with TXT and PDF assets."
          artifacts: "ebook_*.pdf"
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifactErrorsFailBuild: false
          makeLatest: false
