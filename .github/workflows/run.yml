name: generate-ebook
on:
  workflow_dispatch:
  schedule:
    - cron: "0 13 * * *"   # daily 13:00 UTC (09:00 ET)

jobs:
  run:
    runs-on: ubuntu-latest

    # Map secrets → env once here. No 'if: secrets...' anywhere.
    env:
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

  - name: Install deps (Transformers CPU + fpdf2)
  run: |
    python -m pip install --upgrade pip
    pip install "transformers>=4.44" "torch>=2.3" tqdm fpdf2


      - name: Generate ebook text (no external API)
        run: |
          set -e
          python - <<'PY'
          import datetime
          from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline

          TOPIC = "Mindfulness for Beginners"        # change freely
          MODEL_ID = "distilgpt2"                    # tiny & reliable

          print(f"→ Loading model: {MODEL_ID}")
          tok = AutoTokenizer.from_pretrained(MODEL_ID)
          mdl = AutoModelForCausalLM.from_pretrained(MODEL_ID)
          gen = pipeline("text-generation", model=mdl, tokenizer=tok, device=-1)

          prompt = (
              f"Write a concise, beginner-friendly short ebook about: {TOPIC}.\n"
              "Include a short intro, 4–6 brief chapters (1–2 paragraphs each),\n"
              "and an actionable checklist at the end.\n"
          )

          print("→ Generating…")
          out = gen(prompt, max_new_tokens=400, do_sample=True, temperature=0.8, top_p=0.95)
          text = out[0]["generated_text"]

          ts = datetime.datetime.utcnow().strftime("%Y%m%d_%H%M%S")
          fname = f"ebook_{ts}.txt"
          with open(fname, "w", encoding="utf-8") as f:
              f.write(text)
          print("✅ Saved", fname)
          PY

- name: Convert TXT → PDF (Unicode-safe)
  run: |
    set -e
    python - <<'PY'
    import glob, os
    from fpdf import FPDF  # from fpdf2

    # On ubuntu-latest these fonts exist:
    FONT_PATH = "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"

    def to_pdf(txt_path, pdf_path, title=None):
        pdf = FPDF(format="Letter")
        pdf.add_page()
        # Register a Unicode font
        pdf.add_font("DejaVu", "", FONT_PATH, uni=True)
        pdf.set_font("DejaVu", size=16)
        if title:
            pdf.cell(0, 10, title, ln=True, align="C")
            pdf.ln(5)
        pdf.set_font("DejaVu", size=12)
        with open(txt_path, "r", encoding="utf-8") as f:
            text = f.read()
        # Split into paragraphs for nicer layout
        for para in text.split("\n\n"):
            para = para.strip()
            if para:
                pdf.multi_cell(0, 6, para)
                pdf.ln(2)
        pdf.output(pdf_path)

    made_any = False
    for txt in glob.glob("ebook_*.txt"):
        pdf = txt.replace(".txt", ".pdf")
        title = os.path.basename(txt).replace("_"," ").replace(".txt","").title()
        to_pdf(txt, pdf, title)
        print("✅ PDF:", pdf)
        made_any = True

    if not made_any:
        raise SystemExit("No TXT files found to convert.")
    PY


      - name: Upload artifacts (TXT & PDF)
        uses: actions/upload-artifact@v4
        with:
          name: ebooks
          path: |
            ebook_*.txt
            ebook_*.pdf

      # ===== Optional: itch.io publish via butler =====
      - name: Install butler
        uses: remarkablegames/setup-butler@v2

      - name: Push latest PDF to itch.io (non-blocking)
        # No 'if:' here; we gate inside the script using the env var.
        continue-on-error: true
        env:
          ITCH_USER: your_itch_username         # <-- set this
          ITCH_GAME: auto-ebooks                # <-- created on first push
          CHANNEL: pdf
        run: |
          set -e
          if [ -z "${BUTLER_API_KEY}" ]; then
            echo "No BUTLER_API_KEY set; skipping itch.io publish."
            exit 0
          fi

          PDF=$(ls -1t ebook_*.pdf | head -n1 || true)
          if [ -z "$PDF" ]; then
            echo "No PDF found to publish; skipping."
            exit 0
          fi

          VERSION=$(date -u +"%Y.%m.%d.%H%M")
          echo "Pushing $PDF to $ITCH_USER/$ITCH_GAME:$CHANNEL (version $VERSION)"
          butler push "$PDF" "$ITCH_USER/$ITCH_GAME:$CHANNEL" --userversion "$VERSION" || echo "butler push failed (skipping)."
